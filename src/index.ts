import inquirer from 'inquirer';
import * as queries from './queries.js';

export async function init() {
	// prompts for the user to choose from
	// 1.) View all departments
	// 2.) View all roles
	// 3.) View all employees
	// 4.) Add a department
	// 5.) Add a role
	// 6.) Add an employee
	// 7.) Update an employee role
	// 8.) Quit

	const choice = await inquirer.
		prompt([{
			type: 'list',
			name: 'action',
			message: 'What would you like to do?',
			choices: [
				'View all departments',
				'View all roles',
				'View all employees',
				'Add a department',
				'Add a role',
				'Add an employee',
				'Update an employee role',
				'Quit'
			]
		}]);
	if (choice.action === 'View all departments') {
		const result = await queries.viewDepartments();
		console.table(result);
		init();
	} else if (choice.action === 'View all roles') {
		const result = await queries.viewRoles();
		console.table(result);
		init();
	} else if (choice.action === 'View all employees') {
		const result = await queries.viewEmployees();
		console.table(result);
		init();
	} else if (choice.action === 'Add a department') {
		addDepartmentInput();
	} else if (choice.action === 'Add a role') {
		addRoleInput();
	} else if (choice.action === 'Add an employee') {
		addEmployeeInput();
	} else if (choice.action === 'Update an employee role') {
		updateEmployeeRoleSelection();
	} else if (choice.action === 'Quit') {
		process.exit(0); // this will exit the program with a status code of 0, which means it exited successfully
	} else { // default case is to quit also, but selecting quit will match another if statement and will run this code but passing a 0 indicating no error
		process.exit(1); // this will exit the program with a status code of 1, which means it exited with an error (no proper option or unintended option somehow selected)
	}
}

async function addDepartmentInput() {
	const response = await inquirer.
		prompt([{
			type: 'input',
			name: 'name',
			message: 'Enter the name of the department'
		}])
	await queries.addDepartment(response.name);
	await init();
}

async function addRoleInput() {
	const allDepartments = await queries.viewDepartments();
	const departmentList = allDepartments.map((department: { id: number, department_name: string }) => ({ name: department.department_name, value: department.id }));
	const response = await inquirer.
		prompt([{
			type: 'input',
			name: 'title',
			message: 'Enter the title of the role'
		}, {
			type: 'input',
			name: 'salary',
			message: 'Enter the salary of the role'
		}, {
			type: 'list',
			name: 'department_name',
			message: 'Enter the department for this role',
			choices: departmentList
		}]);
	await queries.addRole(response.title, response.salary, response.department_name);
	await init();
}

// following 2 functions generated by coplit based on using the exact same style as the 2 before this

async function addEmployeeInput() {
	const allRoles = await queries.viewRoles();
	const allEmployees = await queries.viewEmployees();
	const roleList = allRoles.map((role: { id: number, title: string }) => ({ name: role.title, value: role.id }));
	const managerList = allEmployees.map((employee: { id: number, first_name: string, last_name: string }) => ({ name: `${employee.first_name} ${employee.last_name}`, value: employee.id }));
	// following 2 lines are custom code to allow the user to select no manager
	var noManager = { name: 'No Manager', value: null as any }; // we let the user select no manager and hide the null value as any to be able to pass it into a number spot that is allowedto be null in the database
	managerList.push(noManager);
	const response = await inquirer.
		prompt([{
			type: 'input',
			name: 'first_name',
			message: 'Enter the first name of the employee'
		}, {
			type: 'input',
			name: 'last_name',
			message: 'Enter the last name of the employee'
		}, {
			type: 'list',
			name: 'role_id',
			message: 'Select the role of the employee',
			choices: roleList
		}, {
			type: 'list',
			name: 'manager_id',
			message: 'Select the manager of the employee',
			choices: managerList
		}]);
	await queries.addEmployee(response.first_name, response.last_name, response.role_id, response.manager_id);
	await init();
}

async function updateEmployeeRoleSelection() {
	const allEmployees = await queries.viewEmployees();
	const allRoles = await queries.viewRoles();
	const employeeList = allEmployees.map((employee: { id: number, first_name: string, last_name: string }) => ({ name: `${employee.first_name} ${employee.last_name}`, value: employee.id }));
	const roleList = allRoles.map((role: { id: number, title: string }) => ({ name: role.title, value: role.id }));
	const response = await inquirer.
		prompt([{
			type: 'list',
			name: 'employee_id',
			message: 'Select the employee whose role you want to update',
			choices: employeeList
		}, {
			type: 'list',
			name: 'role_id',
			message: 'Select the new role of the employee',
			choices: roleList
		}])
	await queries.updateEmployeeRole(response.employee_id, response.role_id);
	await init();
}

init();